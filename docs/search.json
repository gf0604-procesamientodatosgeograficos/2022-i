[{"path":"index.html","id":"bienvenida","chapter":"Bienvenida","heading":"Bienvenida","text":"Este es un curso introductorio al procesamiento de datos geográficos mediante el lenguaje de programación R. Se imparte en la Escuela de Geografía de la Universidad de Costa Rica.Se estudian los fundamentos de R, sus bibliotecas geoespaciales y sus capacidades para generar gráficos estadísticos. También se utilizan herramientas para facilitar la reproducibilidad de los procedimientos y su comunicación través de la Internet y otros medios.El enfoque del curso es teórico-práctico, con lecciones teóricas combinadas con ejercicios de programación en los cuales los estudiantes aplican en diversos escenarios de procesamiento de datos los conocimientos y habilidades aprendidas. se requiere de experiencia previa en programación de computadoras.Este sitio web corresponde al curso impartido durante el primer ciclo lectivo de 2022. Para consultar las versiones de otros ciclos lectivos, puede visitar el sitio web general del curso.Información de contactoSi tiene alguna pregunta o comentario sobre este curso, por favor contacte :Manuel Vargas - manuel.vargas_d@ucr.ac.cr\nProfesor\nUniversidad de Costa Rica,\nCiudad Universitaria Rodrigo Facio,\nSan Pedro de Montes de Oca,\nCosta Rica.Los contenidos de este curso, menos que se especifique de otra forma, se comparten mediante una licencia de Creative Commons Reconocimiento-CompartirIgual 4.0 Internacional.","code":""},{"path":"programa-del-curso.html","id":"programa-del-curso","chapter":"Programa del curso","heading":"Programa del curso","text":"Programa del grupo 001Programa del grupo 002","code":""},{"path":"pensamiento-computacional.html","id":"pensamiento-computacional","chapter":"1 Pensamiento computacional","heading":"1 Pensamiento computacional","text":"","code":""},{"path":"pensamiento-computacional.html","id":"resumen","chapter":"1 Pensamiento computacional","heading":"1.1 Resumen","text":"El pensamiento computacional es un enfoque para la resolución de problemas basado en conceptos y métodos de las ciencias de la computación. Los principios fundamentales del pensamiento computacional son:Descomposición: división de un problema en subproblemas más pequeños.Reconocimiento de patrones: búsqueda de similitudes en los problemas.Abstracción: identificación de la información que se necesita y filtrado de la que se necesita para resolver un problema.Algoritmos: descripción, paso por paso, de la solución un problema.","code":""},{"path":"pensamiento-computacional.html","id":"diapositivas","chapter":"1 Pensamiento computacional","heading":"1.2 Diapositivas","text":"Introducción al pensamiento computacional (diapositivas)","code":""},{"path":"pensamiento-computacional.html","id":"recursos-de-interés","chapter":"1 Pensamiento computacional","heading":"1.3 Recursos de interés","text":"Harvard University. (2022). CS50’s Introduction Computer Science. EdX. https://www.edx.org/course/introduction-computer-science-harvardx-cs50xWing, J. M. (2006). Computational thinking. Communications ACM, 49(3), 33-35. https://doi.org/10.1145/1118178.1118215. Disponible en https://www.cs.cmu.edu/~15110-s13/Wing06-ct.pdf.","code":""},{"path":"arquitectura-de-computadoras-y-lenguajes-de-programación.html","id":"arquitectura-de-computadoras-y-lenguajes-de-programación","chapter":"2 Arquitectura de computadoras y lenguajes de programación","heading":"2 Arquitectura de computadoras y lenguajes de programación","text":"","code":""},{"path":"arquitectura-de-computadoras-y-lenguajes-de-programación.html","id":"resumen-1","chapter":"2 Arquitectura de computadoras y lenguajes de programación","heading":"2.1 Resumen","text":"Las computadoras modernas están construídas con base en circuitos integrados (CI), también llamados chips o microchips. Los CI procesan información digital (que usa valores discretos), la cual generalmente es binaria (.e. de dos valores). Los CI de una computadora procesan dos estados correspondientes dos niveles de tensión eléctrica: alto y bajo. Estos estados se representan con 0 y 1. Esto facilita la aplicación de la lógica binaria y de la aritmética binaria.Durante el período entre las guerras mundiales, Allan Turing desarrolló la máquina de Turing, un dispositivo teórico que manipula símbolos de una cinta de acuerdo con una tabla de reglas. La máquina de Turing simula el funcionamiento de un algoritmo y los conceptos de entrada, procesamiento y salida. En 1945, John von Neumann propuso un concepto conocido como programa almacenado, en el cual los datos y los programas se almacenan en una estructura llamada memoria, separada del hardware que ejecuta las instrucciones. Este modelo permite que las computadoras sean más fáciles de reprogramar y es conocido actualmente como arquitectura de von Neumann.El lenguaje máquina es un conjunto de instrucciones binarias interpretables por un CPU. Las instrucciones representan acciones ser ejecutadas por la computadora. Cada CPU tiene su propio lenguaje máquina. Un programa consiste de una secuencia de instrucciones en lenguaje máquina.Debido que programar una computadora en lenguaje máquina es excesivamente lento y complicado, en la década de 1950 comenzaron crearse lenguajes de programación que, en lugar de unos y ceros, consisten de instrucciones formadas por palabras, usualmente en idioma inglés. Existe una gran variedad de lenguajes de programación que han sido creados con diversos fines: científicos, comerciales, educacionales, etc.","code":""},{"path":"arquitectura-de-computadoras-y-lenguajes-de-programación.html","id":"diapositivas-1","chapter":"2 Arquitectura de computadoras y lenguajes de programación","heading":"2.2 Diapositivas","text":"Arquitectura de computadoras y lenguajes de programación (diapositivas)","code":""},{"path":"interacción-humano-computadora.html","id":"interacción-humano-computadora","chapter":"3 Interacción humano-computadora","heading":"3 Interacción humano-computadora","text":"","code":""},{"path":"interacción-humano-computadora.html","id":"resumen-2","chapter":"3 Interacción humano-computadora","heading":"3.1 Resumen","text":"La interacción humano-computadora (IHC) es un área de investigación dedicada al diseño y uso de la tecnología computacional. Esta interacción se realiza través de interfaces entre personas (usuarios) y computadoras. La IHC se sitúa en la intersección de varias disciplinas que incluyen ciencias de la computación, ciencias de la conducta, diseño y estudios de medios, entre otras.La IHC enfatiza que, diferencia de otras máquinas y herramientas con usos más limitados, las computadoras tienen aplicaciones muy diversas que implican un “diálogo” más complejo con los usuarios.","code":""},{"path":"interacción-humano-computadora.html","id":"interfaces-de-usuario","chapter":"3 Interacción humano-computadora","heading":"3.2 Interfaces de usuario","text":"La interfaz de usuario es el medio con el que el usuario puede comunicarse con una computadora (o, en general, con cualquier máquina o dispositivo), y comprende todos las formas de interacción entre esta y el usuario. Idealmente, las interfaces de usuario se diseñan para que sean fáciles de entender y de utilizar.Las interfaces de usuario pueden clasificarse en tres tipos: interfaces de línea de comandos (CLI, del inglés, command-line interface), interfaces gráficas de usuario (GUI, del inglés, graphical user interface) e interfaces naturales de usuario (NUI, del inglés, natural user interface).","code":""},{"path":"interacción-humano-computadora.html","id":"interfaces-de-línea-de-comandos","chapter":"3 Interacción humano-computadora","heading":"3.2.1 Interfaces de línea de comandos","text":"Las interfaces de línea de comandos (CLI) permiten los usuarios dar indicaciones la computadora por medio de líneas de texto correspondientes comandos o instrucciones (ej. al sistema operativo) (vea la figura 3.1). Los comandos pueden introducirse interactivamente en algún tipo de entrada de texto (ej. el prompt de un sistema operativo) o, de manera más automatizada, través de un archivo (ej. un script).\nFigure 3.1: Terminal (CLI) del sistema operativo Ubuntu (Linux).\nEste tipo de interfaz existe casi desde los inicios de la computación y es superada en antigüedad solo por las tarjetas perforadas y otros mecanismos similares.Las CLI tienen la ventaja de que facilitan el desarrollo de procedimientos reproducibles y repetibles. Por otro lado, puede ser más complejas, especialmente para usuarios experimentados.","code":""},{"path":"interacción-humano-computadora.html","id":"interfaces-gráficas-de-usuario","chapter":"3 Interacción humano-computadora","heading":"3.2.2 Interfaces gráficas de usuario","text":"Las interfaces gráficas de usuario (GUI) utilizan imágenes y otros objetos gráficos (ej. iconos) para representar la información y las acciones disponibles en la interfaz. Surgieron como una evolución de las CLI. Por ejemplo, muchos sistemas operativos desarrollaron primero sus CLI y luego GUI que permiten realizar acciones equivalentes los comandos de las CLI. La figura 3.2 muestra la interfaz gráfica del sistema operativo Ubuntu (Linux).\nFigure 3.2: Interfaz gráfica GNOME del sistema operativo Ubuntu (Linux).\nComo un precursor de las actuales GUI, suele mencionarse una interfaz de hipervículos desarrollada en el Stanford Research Institute, en la década de 1960 (se recomienda ver Mother Demos, presented Douglas Engelbart (1968)). Este concepto fue ampliado y trasladado un entorno gráfico por los investigadores del Xerox PARC, en Palo Alto. Ahí se introdujeron conceptos como ventanas, casillas de verificación (checkboxes), botones de radio, menús y puntero del ratón. La interfaz fue implementada comercialmente en el computador Xerox Star 8010, en 1981.Las GUI son más amigables e intuitivas que las CLI, pero también pueden ser menos versátiles y menos aptas para reproducir procedimientos.","code":""},{"path":"interacción-humano-computadora.html","id":"interfaces-naturales-de-usuario","chapter":"3 Interacción humano-computadora","heading":"3.2.3 Interfaces naturales de usuario","text":"En las interfaces naturales de usuario (NUI), este interactúa con la computadora sin utilizar dispositivos como el ratón o el teclado, sino través de movimientos, gestos o la voz. Las NUI requieren que el usuario aprenda el uso de nuevas tecnologías, ya que puede utilizar medios ya conocidos.","code":""},{"path":"interacción-humano-computadora.html","id":"recursos-de-interés-1","chapter":"3 Interacción humano-computadora","heading":"3.3 Recursos de interés","text":"Marcel. (2012). Mother Demos, presented Douglas Engelbart (1968). https://www.youtube.com/watch?v=yJDv-zdhzMY","code":""},{"path":"ejemplo-de-interfaz-de-línea-de-comandos---gdalogr-biblioteca-para-lectura-y-escritura-de-datos-geoespaciales.html","id":"ejemplo-de-interfaz-de-línea-de-comandos---gdalogr-biblioteca-para-lectura-y-escritura-de-datos-geoespaciales","chapter":"4 Ejemplo de interfaz de línea de comandos - GDAL/OGR: biblioteca para lectura y escritura de datos geoespaciales","heading":"4 Ejemplo de interfaz de línea de comandos - GDAL/OGR: biblioteca para lectura y escritura de datos geoespaciales","text":"","code":""},{"path":"ejemplo-de-interfaz-de-línea-de-comandos---gdalogr-biblioteca-para-lectura-y-escritura-de-datos-geoespaciales.html","id":"resumen-3","chapter":"4 Ejemplo de interfaz de línea de comandos - GDAL/OGR: biblioteca para lectura y escritura de datos geoespaciales","heading":"4.1 Resumen","text":"Se introduce la biblioteca GDAL/OGR para lectura y escritura de datos geoespaciales y se muestran varios ejemplos de su uso través de los programas para la línea de comandos del sistema operativo.","code":""},{"path":"ejemplo-de-interfaz-de-línea-de-comandos---gdalogr-biblioteca-para-lectura-y-escritura-de-datos-geoespaciales.html","id":"trabajo-previo","chapter":"4 Ejemplo de interfaz de línea de comandos - GDAL/OGR: biblioteca para lectura y escritura de datos geoespaciales","heading":"4.2 Trabajo previo","text":"","code":""},{"path":"ejemplo-de-interfaz-de-línea-de-comandos---gdalogr-biblioteca-para-lectura-y-escritura-de-datos-geoespaciales.html","id":"lecturas","chapter":"4 Ejemplo de interfaz de línea de comandos - GDAL/OGR: biblioteca para lectura y escritura de datos geoespaciales","heading":"4.2.1 Lecturas","text":"Pebesma, E., Wagner, W., Verbesselt, J., Goor, E., Briese, C., & Neteler, M. (2016). OpenEO: GDAL Earth Observation Analytics. https://r-spatial.org/2016/11/29/openeo.html","code":""},{"path":"ejemplo-de-interfaz-de-línea-de-comandos---gdalogr-biblioteca-para-lectura-y-escritura-de-datos-geoespaciales.html","id":"tutoriales","chapter":"4 Ejemplo de interfaz de línea de comandos - GDAL/OGR: biblioteca para lectura y escritura de datos geoespaciales","heading":"4.2.2 Tutoriales","text":"Gandhi, U. (2020). Mastering GDAL Tools. Spatial Thoughts. https://spatialthoughts.com/courses/mastering-gdal-tools/","code":""},{"path":"ejemplo-de-interfaz-de-línea-de-comandos---gdalogr-biblioteca-para-lectura-y-escritura-de-datos-geoespaciales.html","id":"descripción-general","chapter":"4 Ejemplo de interfaz de línea de comandos - GDAL/OGR: biblioteca para lectura y escritura de datos geoespaciales","heading":"4.3 Descripción general","text":"Geospatial Data Abstraction Library (GDAL) es una biblioteca para leer y escribir datos geoespaciales en formatos raster y vectoriales. GDAL se refiere la funcionalidad para datos raster y OGR (sigla antes usada para OpenGIS Simple Features Reference Implementation) la correspondiente datos vectoriales. En ocasiones, se utiliza la sigla GDAL (sin OGR) para referirse la funcionalidad para ambos modelos de datos. GDAL es distribuida por la Open Source Geospatial Foundation (OSGeo) con una licencia X/MIT.GDAL/OGR cuenta con un único modelo abstracto de datos raster y un único modelo abstracto de datos vectoriales, lo que permite programar aplicaciones geoespaciales sin tener que ocuparse de las particularidades de cada formato que se utilice (GeoTIFF, NetCDF, ESRI Shapefile, GeoPackage, GeoJSON, etc.).pesar de que GDAL/OGR está programada en C/C++, cuenta con una interfaz de programación de aplicaciones (API, en inglés, Application Programming Interface) para varios lenguajes de programación, incluyendo C, C++, Python y Java. Además, ofrece un conjunto de programas para la línea de comandos del sistema operativo cuyas distribuciones binarias están disponibles para varios sistemas operativos, incluyendo Windows, macOS y Linux. Estas API y los programas también están incluídos en la plataforma de ciencia de datos Anaconda, la cual puede instalarse en todos los sistemas operativos mencionados.","code":""},{"path":"ejemplo-de-interfaz-de-línea-de-comandos---gdalogr-biblioteca-para-lectura-y-escritura-de-datos-geoespaciales.html","id":"programas-para-la-línea-de-comandos-del-sistema-operativo","chapter":"4 Ejemplo de interfaz de línea de comandos - GDAL/OGR: biblioteca para lectura y escritura de datos geoespaciales","heading":"4.4 Programas para la línea de comandos del sistema operativo","text":"Los programas de GDAL/OGR para la línea de comandos del sistema operativo permiten ejecutar tareas de geoprocesamiento y de conversión entre formatos geoespaciales sin utilizar una interfaz gráfica o un lenguaje de programación.","code":""},{"path":"ejemplo-de-interfaz-de-línea-de-comandos---gdalogr-biblioteca-para-lectura-y-escritura-de-datos-geoespaciales.html","id":"instalación","chapter":"4 Ejemplo de interfaz de línea de comandos - GDAL/OGR: biblioteca para lectura y escritura de datos geoespaciales","heading":"4.4.1 Instalación","text":"En el sitio web de GDAL se describen varias opciones para su descarga e instalación, incluyendo archivos binarios ejecutables para varias plataformas.En el caso del sistema operativo Windows, estos programas se incluyen en la aplicación OSGeo4W, la cual puede instalarse junto con el sistema de información geográfica de escritorio QGIS. Se recomienda usar el instalador de red OSGeo4W.","code":""},{"path":"ejemplo-de-interfaz-de-línea-de-comandos---gdalogr-biblioteca-para-lectura-y-escritura-de-datos-geoespaciales.html","id":"consideraciones-generales","chapter":"4 Ejemplo de interfaz de línea de comandos - GDAL/OGR: biblioteca para lectura y escritura de datos geoespaciales","heading":"4.4.2 Consideraciones generales","text":"Los programas de GDAL comparten una serie de opciones comunes para datos raster y de opciones comunes para datos vectoriales que pueden visualizarse con la opción -- help-general. Por ejemplo:Para obtener ayuda acerca de un comando particular, puede usarse la opción -- help. Por ejemplo:","code":"ogrinfo --help-generalGeneric GDAL utility command options:\n  --version: report version of GDAL in use.\n  --license: report GDAL license info.\n  --formats: report all configured format drivers.\n  --format [format]: details of one format.\n  --optfile filename: expand an option file into the argument list.\n  --config key value: set system configuration option.\n  --debug [on/off/value]: set debug level.\n  --pause: wait for user input, time to attach debugger\n  --locale [locale]: install locale for debugging (i.e. en_US.UTF-8)\n  --help-general: report detailed help on general options.ogrinfo --helpUsage: ogrinfo [--help-general] [-ro] [-q] [-where restricted_where|@filename]\n               [-spat xmin ymin xmax ymax] [-geomfield field] [-fid fid]\n               [-sql statement|@filename] [-dialect sql_dialect] [-al] [-rl] [-so] [-fields={YES/NO}]\n               [-geom={YES/NO/SUMMARY}] [[-oo NAME=VALUE] ...]\n               [-nomd] [-listmdd] [-mdd domain|`all`]*\n               [-nocount] [-noextent] [-nogeomtype] [-wkt_format WKT1|WKT2|...]\n               [-fielddomain name]\n               datasource_name [layer [layer ...]]"},{"path":"ejemplo-de-interfaz-de-línea-de-comandos---gdalogr-biblioteca-para-lectura-y-escritura-de-datos-geoespaciales.html","id":"ejemplos-de-uso","chapter":"4 Ejemplo de interfaz de línea de comandos - GDAL/OGR: biblioteca para lectura y escritura de datos geoespaciales","heading":"4.4.3 Ejemplos de uso","text":"En esta sección, se presentan ejemplos de uso de los programas, tanto para datos vectoriales como para datos raster.","code":""},{"path":"ejemplo-de-interfaz-de-línea-de-comandos---gdalogr-biblioteca-para-lectura-y-escritura-de-datos-geoespaciales.html","id":"programas-para-datos-vectoriales","chapter":"4 Ejemplo de interfaz de línea de comandos - GDAL/OGR: biblioteca para lectura y escritura de datos geoespaciales","heading":"4.4.3.1 Programas para datos vectoriales","text":"","code":""},{"path":"ejemplo-de-interfaz-de-línea-de-comandos---gdalogr-biblioteca-para-lectura-y-escritura-de-datos-geoespaciales.html","id":"ogrinfo","chapter":"4 Ejemplo de interfaz de línea de comandos - GDAL/OGR: biblioteca para lectura y escritura de datos geoespaciales","heading":"4.4.3.1.1 ogrinfo","text":"El programa ogrinfo despliega información acerca de una fuente de datos vectoriales.Los siguientes comandos despliegan información sobre la capa de países de Natural Earth, tanto para el formato comprimido (ZIP) como para el formato shapefile (SHP). En el caso comprimido, note el uso de /vsizip/, para sistemas de archivos virtuales.Cree una nueva carpeta (ej. ejemplos-uso-gdal) para almacenar los archivos con los que trabajará.Descargue en la nueva carpeta la capa de paises desde la dirección https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/110m/cultural/ne_110m_admin_0_countries.zip.Descomprima el archivo ZIP (lo borre).Con una herramienta de escritorio (ej. QGIS), visualice tanto el archivo ZIP como el SHP.Desde una interfaz de línea de comandos (ej. OSGeo4W Shell), ubíquese en la carpeta que creó y ejecute los siguientes comandos para obtener información sobre ambos archivos:¿Qué información despliegan ambos comandos? ¿Qué efectos produce el uso de las opciones -al y -? Revise la documentación sobre estas opciones y pruebe los comandos omitiendo cada una y ambas.Ejecute los siguientes comandos para filtrar registros de acuerdo con expresiones lógicas (booleana).Note el uso del operador (y), el cuál es un operador lógico, como también lo son el (o) y el ().","code":" # Información sobre la capa comprimida en formato ZIP\nogrinfo -al -so /vsizip/ne_110m_admin_0_countries.zip\n\n# Información sobre la capa descomprimida en formato shapefile\nogrinfo -al -so ne_110m_admin_0_countries.shp# Registros (países y otros territorios) del continente 'Oceania' (se omite el campo de la geometría)\nogrinfo -al -where \"CONTINENT='Oceania'\" -geom=NO ne_110m_admin_0_countries.shp\n\n# Registros de Oceanía de tipo país ('Country')\nogrinfo -al -where \"CONTINENT='Oceania' AND TYPE='Country'\" -geom=NO ne_110m_admin_0_countries.shp"},{"path":"ejemplo-de-interfaz-de-línea-de-comandos---gdalogr-biblioteca-para-lectura-y-escritura-de-datos-geoespaciales.html","id":"ogr2ogr","chapter":"4 Ejemplo de interfaz de línea de comandos - GDAL/OGR: biblioteca para lectura y escritura de datos geoespaciales","heading":"4.4.3.1.2 ogr2ogr","text":"El programa ogr2ogr realiza conversiones entre formatos de fuentes de datos vectoriales. la vez, puede ejecutar otras operaciones como selección de atributos y geometrías, filtrado por criterios espaciales y espaciales, reproyección y validación de geometrías, entre otras.Ejecute el siguiente comando para desplegar la lista de formatos (drivers) vectoriales soportados por OGR:Ejecute los siguientes comandos para convertir la capa de países (en SHP) otros formatos y cambiar su nombre:Ejecute el siguiente comando para desplegar la lista de capas en el WFS “IGN Cartografía 1:5mil” del Instituto Geográfico Nacional (IGN):Ejecute el siguiente comando para descargar la capa de cantones del WFS “IGN Cartografía 1:5mil” del Instituto Geográfico Nacional (IGN) en formato GeoPackage:","code":"# Despliegue de la lista de formatos vectoriales soportados por GDAL/OGR\nogr2ogr --formatsSupported Formats:\n  FITS -raster,vector- (rw+): Flexible Image Transport System\n  PCIDSK -raster,vector- (rw+v): PCIDSK Database File\n  netCDF -raster,multidimensional raster,vector- (rw+vs): Network Common Data Format\n  PDS4 -raster,vector- (rw+vs): NASA Planetary Data System 4\n  VICAR -raster,vector- (rw+v): MIPL VICAR file\n  JP2OpenJPEG -raster,vector- (rwv): JPEG-2000 driver based on OpenJPEG library\n  PDF -raster,vector- (rw+vs): Geospatial PDF\n  MBTiles -raster,vector- (rw+v): MBTiles\n  BAG -raster,multidimensional raster,vector- (rw+v): Bathymetry Attributed Grid\n  EEDA -vector- (ro): Earth Engine Data API\n  OGCAPI -raster,vector- (rov): OGCAPI\n  ESRI Shapefile -vector- (rw+v): ESRI Shapefile\n...# Conversión de SHP a GeoJSON\nogr2ogr paises.geojson ne_110m_admin_0_countries.shp\n\n# Conversión de SHP a GeoPackage\nogr2ogr paises.gpkg ne_110m_admin_0_countries.shp# Lista de capas en el WFS \"IGN Cartografía 1:5mil\"\nogrinfo WFS:\"http://geos.snitcr.go.cr/be/IGN_5/wfs\"INFO: Open of `WFS:http://geos.snitcr.go.cr/be/IGN_5/wfs'\n      using driver `WFS' successful.\nMetadata:\n  ABSTRACT=This is the reference implementation of WFS 1.0.0 and WFS 1.1.0, supports all WFS operations including Transaction.\n  PROVIDER_NAME=The Ancient Geographers\n  TITLE=SNIT Web Feature Service\n1: IGN_5:forestal2017_5k (title: ARBOLES 2017 1:5MIL)\n2: IGN_5:indice_5000 (title: Cobertura Ortofoto 1:5mil)\n3: IGN_5:cultivos2017_5k (title: Cultivos 2017 1:5mil)\n4: IGN_5:curvas_5000 (title: Curvas de Nivel 10m (5000))\n5: IGN_5:delimitacion2017_5k (title: Delimitación territorial 2017 1:5mil)\n6: IGN_5:edificaciones2017_5k (title: Edificaciones 2017 1:5mil)\n7: IGN_5:hidrografia_5000 (title: Hidrografía 1:5mil)\n8: IGN_5:limitecantonal_5k (title: Límite Cantonal 1:5mil)\n9: IGN_5:limitedistrital_5k (title: Límite Distrital 1:5mil)\n10: IGN_5:limiteprovincial_5k (title: Límite Provincial 1:5mil)\n11: IGN_5:linea_costa_5000 (title: Línea de Costa 1:5mil)\n12: IGN_5:pastos2017_5k (title: Pastos 2017 1:5mil)\n13: IGN_5:urbano_5000 (title: Urbano 1:5mil)\n14: IGN_5:vias_5000 (title: Vías 1:5mil)# Descarga y validación de geometrías\nogr2ogr -makevalid cantones.gpkg WFS:\"http://geos.snitcr.go.cr/be/IGN_5/wfs\" \"IGN_5:limitecantonal_5k\"\n\n# Descarga, validación de geometrías y reproyección a WGS84\nogr2ogr -t_srs EPSG:4326 -makevalid cantones-wgs84.gpkg WFS:\"http://geos.snitcr.go.cr/be/IGN_5/wfs\" \"IGN_5:limitecantonal_5k\""},{"path":"ejemplo-de-interfaz-de-línea-de-comandos---gdalogr-biblioteca-para-lectura-y-escritura-de-datos-geoespaciales.html","id":"ejercicios","chapter":"4 Ejemplo de interfaz de línea de comandos - GDAL/OGR: biblioteca para lectura y escritura de datos geoespaciales","heading":"4.4.4 Ejercicios","text":"De la capa de países de Natural Earth, extraiga los registros con población estimada superior mil millones. En la capa resultante, incluya solamente los campos de nombre del país en español y población estimada. ¿Cuál opción debe utilizar para especificar los campos que desea incluir en el archivo de salida?De la capa de cantones de Costa Rica, extraiga en un archivo GeoJSON los cantones de las provincia de Guanacaste, Puntarenas y Limón.De la capa de cantones de Costa Rica, extraiga en un archivo GeoJSON los cantones con área mayor o igual 2000 km2.De la capa de cantones de Costa Rica, extraiga en un archivo GeoJSON los cantones con área mayor o igual 2000 km2 de la provincia de Limón.De la capa de cantones de Costa Rica, extraiga en un archivo GeoJSON los cantones con área mayor o igual 2000 km2 de las provincias de Guanacaste, Puntarenas y Limón.De la capa de cantones de Costa Rica, extraiga en un archivo GeoPackage, los cantones de Guanacaste, con la excepción de Liberia.","code":"# La opción -select especifica la lista de campos que se copian al archivo de salida\nogr2ogr -select \"NAME_ES, POP_EST\" -where \"POP_EST >= 1000000000\" paises-muy-poblados.gpkg ne_110m_admin_0_countries.shpogr2ogr -where \"provincia = 'Guanacaste' OR provincia = 'Puntarenas' OR provincia = 'Limón'\" cantones-guanacaste-puntarenas-limon.geojson WFS:\"http://geos.snitcr.go.cr/be/IGN_5/wfs\" \"IGN_5:limitecantonal_5k\"ogr2ogr -where \"area >= 2000\" cantones-grandes.geojson WFS:\"http://geos.snitcr.go.cr/be/IGN_5/wfs\" \"IGN_5:limitecantonal_5k\"# El operador lógico AND se utiliza para buscar los registros que cumplen dos condiciones simultáneamente\nogr2ogr -where \"area >= 2000 AND provincia = 'Limón'\" cantones-grandes-limon.geojson WFS:\"http://geos.snitcr.go.cr/be/IGN_5/wfs\" \"IGN_5:limitecantonal_5k\"# En este caso, deben utilizarse paréntesis para alterar el orden de precedencia de los operadores lógicos AND y OR\nogr2ogr -where \"area >= 2000 AND (provincia = 'Guanacaste' OR provincia = 'Puntarenas' OR provincia = 'Limón')\" cantones-grandes-guanacaste-puntarenas-limon.geojson WFS:\"http://geos.snitcr.go.cr/be/IGN_5/wfs\" \"IGN_5:limitecantonal_5k\"# El operador NOT se utiliza para excluir el cantón de Liberia.\nogr2ogr -where \"provincia = 'Guanacaste' AND NOT(canton = 'Liberia')\" cantones-guanacaste-excepto-liberia.gpkg WFS:\"http://geos.snitcr.go.cr/be/IGN_5/wfs\" \"IGN_5:limitecantonal_5k\""},{"path":"ejemplo-de-interfaz-de-línea-de-comandos---gdalogr-biblioteca-para-lectura-y-escritura-de-datos-geoespaciales.html","id":"recursos-de-interés-2","chapter":"4 Ejemplo de interfaz de línea de comandos - GDAL/OGR: biblioteca para lectura y escritura de datos geoespaciales","heading":"4.5 Recursos de interés","text":"Codecademy. (s. f.). Command Line Tutorial: Learn Command Line. Codecademy. Recuperado 19 de marzo de 2022, de https://www.codecademy.com/learn/learn--command-lineSS64 Command line reference. (s. f.). Recuperado 3 de abril de 2022, de https://ss64.com/","code":""},{"path":"reproducibilidad.html","id":"reproducibilidad","chapter":"5 Reproducibilidad","heading":"5 Reproducibilidad","text":"","code":""},{"path":"reproducibilidad.html","id":"resumen-4","chapter":"5 Reproducibilidad","heading":"5.1 Resumen","text":"Un análisis realizado por un investigador se considera reproducible si el código fuente y los datos que utilizó para obtener los resultados están disponibles y son suficientes para que otro investigador, trabajando de manera independiente, pueda llegar al mismo resultado. El concepto de reproducibilidad es cada vez más importante debido al aumento exponencial de datos y al empleo de la programación de computadoras por parte de especialistas de diversas disciplinas.","code":""},{"path":"reproducibilidad.html","id":"el-concepto-de-reproducibilidad","chapter":"5 Reproducibilidad","heading":"5.2 El concepto de reproducibilidad","text":"En general, la reproducibilidad es la capacidad de un ensayo o experimento de ser reproducido por otros. Más formalmente, en investigación cuantitativa, un análisis se considera reproducible si “el código fuente y los datos utilizados por un investigador para llegar un resultado están disponibles y son suficientes para que otro investigador, trabajando de manera independiente, pueda llegar al mismo resultado”.1La reproducibilidad, junto con la falsabilidad, es uno de los pilares del método científico. Sin embargo, en años recientes, se ha generado una creciente preocupación debido que muchos estudios científicos publicados fallan las pruebas de reproducibilidad (véase, por ejemplo, Excel Depression, de Paul Krugman), dando lugar una crisis de reproducibilidad o replicabilidad en varias ciencias.El concepto de reproducibilidad es cada vez más importante debido, entre otras razones, al aumento exponencial de datos disponibles y la aplicación de la programación de computadoras, para procesar estos datos, por parte de especialistas de muchas disciplinas.","code":""},{"path":"reproducibilidad.html","id":"reproducibilidad-en-ciencia-de-datos-geoespaciales","chapter":"5 Reproducibilidad","heading":"5.3 Reproducibilidad en ciencia de datos geoespaciales","text":"Alex Singleton y otros autores2 han identificado los siguientes retos para la reproducibilidad en ciencia de datos geoespaciales:Los datos deben ser de dominio público y estar disponibles para los investigadores.El software utilizado debe ser de código abierto (open source) y estar disponible para ser revisado.Siempre que sea posible, los flujos de trabajo deben ser públicos y con enlaces los datos, software y métodos de análisis, junto con la documentación necesaria.El proceso de revisión por pares (peer review process) y la publicación académica deben requerir la presentación de un modelo de flujo de trabajo e idealmente la disponibilidad de los materiales necesarios para la replicación.En los casos en los que la reproducibilidad total sea posible (ej. datos sensibles), los investigadores deben esforzarse por incluir todos los aspectos que puedan de un marco de trabajo abierto.En general, el estándar mínimo de reproducibilidad requiere que los datos y el código fuente estén disponibles para otros investigadores.3 Sin embargo, dependiendo de las circunstancias y recursos disponibles, existe todo un espectro de posibilidades, que se ilustra en la figura 5.1.\nFigure 5.1: Espectro de reproducibilidad. Imagen de Anita Graser, basada en (Peng, 2001).\n","code":""},{"path":"reproducibilidad.html","id":"herramientas-para-facilitar-la-reproducibilidad","chapter":"5 Reproducibilidad","heading":"5.4 Herramientas para facilitar la reproducibilidad","text":"La documentación es vital durante todo el ciclo de vida de una investigación reproducible. Se recomienda utilizar mecanismos estandarizados y abiertos como el lenguaje de marcado de hipertexto (HTML, en inglés, HyperText Markup Language) o Markdown, con los cuales pueden crearse documentos mediante editores de texto simples (.e. se requiere de software propietario), y exportables varios formatos (ej. LaTeX, PDF).Para dar mantenimiento, tanto al código fuente como la documentación, es necesario un sistema de control de versiones como Git, el cual permite llevar el registro de los cambios en archivos y también facilita el trabajo colaborativo al reunir las modificaciones hechas por varias personas. Git es usado en varias plataformas que comparten código fuente (ej. GitHub, GitLab) y que ofrecen servicios relacionados, como hospedaje de sitios web.","code":""},{"path":"reproducibilidad.html","id":"recursos-de-interés-3","chapter":"5 Reproducibilidad","heading":"5.5 Recursos de interés","text":"Bartomeus Lab. (2016). reproducible workflow. https://www.youtube.com/watch?v=s3JldKoA0zwFOSS4G. (2021). FOSS4G2021—Open source open spatial data science—Anita Graser. https://www.youtube.com/watch?v=ZjXb53pOor0Krugman, P. (2013). Opinion | Excel Depression. New York Times. https://www.nytimes.com/2013/04/19/opinion/krugman--excel-depression.htmlPeng, R. D. (2011). Reproducible Research Computational Science. Science, 334(6060), 1226-1227. https://doi.org/10.1126/science.1213847Singleton, . D., Spielman, S., & Brunsdon, C. (2016). Establishing framework Open Geographic Information science. International Journal Geographical Information Science, 30(8), 1507-1521. https://doi.org/10.1080/13658816.2015.1137579","code":""},{"path":"markdown-lenguaje-de-marcado.html","id":"markdown-lenguaje-de-marcado","chapter":"6 Markdown: lenguaje de marcado","heading":"6 Markdown: lenguaje de marcado","text":"","code":""},{"path":"markdown-lenguaje-de-marcado.html","id":"trabajo-previo-1","chapter":"6 Markdown: lenguaje de marcado","heading":"6.1 Trabajo previo","text":"","code":""},{"path":"markdown-lenguaje-de-marcado.html","id":"tutoriales-1","chapter":"6 Markdown: lenguaje de marcado","heading":"6.1.1 Tutoriales","text":"Markdown Tutorial. (s. f.). Recuperado 19 de marzo de 2022, de https://www.markdowntutorial.com/","code":""},{"path":"markdown-lenguaje-de-marcado.html","id":"otros","chapter":"6 Markdown: lenguaje de marcado","heading":"6.1.2 Otros","text":"Instale en su computadora el sistema base del lenguaje R y luego el ambiente integrado de desarrollo RStudio Desktop.Cree una cuenta gratuita en la plataforma de desarrollo colaborativo GitHub.","code":""},{"path":"markdown-lenguaje-de-marcado.html","id":"resumen-5","chapter":"6 Markdown: lenguaje de marcado","heading":"6.2 Resumen","text":"Markdown es un lenguaje de marcado ligero ampliamente utilizado en comunicación científica, documentación de programas e investigación reproducible.","code":""},{"path":"markdown-lenguaje-de-marcado.html","id":"descripción-general-1","chapter":"6 Markdown: lenguaje de marcado","heading":"6.3 Descripción general","text":"Markdown es un lenguaje de marcado creado en 2004 por John Gruber. Las “marcas” se utilizan para brindar información acerca de la presentación (ej. negritas, itálicas) o la estructura (ej. títulos, encabezados) de un documento. Se caracteriza por ser más sencillo de leer y de usar que otros lenguajes de marcado (ej. Lenguaje de marcado de Hipertexto o HTML), por lo que se considera un lenguaje de marcado ligero. Los documentos escritos en Markdown pueden exportarse una gran variedad de formatos (ej. HTML, DOC, PDF, LaTex) para ser usados en libros, presentaciones o páginas web, entre otros. Markdown es ampliamente utilizado en comunicación científica, documentación de programas e investigación reproducible.","code":""},{"path":"markdown-lenguaje-de-marcado.html","id":"variaciones","chapter":"6 Markdown: lenguaje de marcado","heading":"6.4 Variaciones","text":"Las variaciones de Markdown, también llamadas flavors, son extensiones o modificaciones de la especificación original. Entre las más populares están:R Markdown: para el lenguaje R.GitHub Flavored Markdown: para la plataforma GitHub.Python Markdown: para el lenguaje Python.Pandoc’s Markdown: para el programa Pandoc de conversión entre formatos.Kramdown: para el lenguaje Ruby.Puede verse una lista más extensa en https://github.com/commonmark/commonmark-spec/wiki/markdown-flavors.","code":""},{"path":"markdown-lenguaje-de-marcado.html","id":"sintaxis","chapter":"6 Markdown: lenguaje de marcado","heading":"6.5 Sintaxis","text":"La sintaxis de Markdown permite especificar diferentes componentes de un documento, entre los que están:Encabezados.Estilos (ej. negritas, itálicas).Citas textuales.Enlaces otros documentos (ej. páginas web).Imágenes.Listas.","code":""},{"path":"markdown-lenguaje-de-marcado.html","id":"encabezados","chapter":"6 Markdown: lenguaje de marcado","heading":"6.5.1 Encabezados","text":"Pueden definirse seis niveles de encabezados, mediante símbolos de numeral (#) antes del texto. El primer nivel es el de tamaño de texto más grande y el sexto el más pequeño. En la parte izquierda de la figura 6.1 se muestra la sintaxis Markdown de los encabezados y la derecha la forma en que se despliegan en un documento.\nFigure 6.1: Sintaxis de Markdown: encabezados.\n","code":""},{"path":"markdown-lenguaje-de-marcado.html","id":"itálicas","chapter":"6 Markdown: lenguaje de marcado","heading":"6.5.2 Itálicas","text":"Se definen con un asterisco (*) antes y después del texto o con un guión bajo (_) antes y después del texto.\nFigure 6.2: Sintaxis de Markdown: itálicas.\n","code":""},{"path":"markdown-lenguaje-de-marcado.html","id":"negritas","chapter":"6 Markdown: lenguaje de marcado","heading":"6.5.3 Negritas","text":"Se definen con dos asteriscos (**) antes y después del texto o con dos guiones bajos (__) antes y después del texto.\nFigure 6.3: Sintaxis de Markdown: negritas.\n","code":""},{"path":"markdown-lenguaje-de-marcado.html","id":"citas-textuales","chapter":"6 Markdown: lenguaje de marcado","heading":"6.5.4 Citas textuales","text":"Se definen con un símbolo de “mayor que” (>) antes de cada línea.\nFigure 6.4: Sintaxis de Markdown: citas textuales.\n","code":""},{"path":"markdown-lenguaje-de-marcado.html","id":"enlaces-a-otros-documentos-hipervínculos","chapter":"6 Markdown: lenguaje de marcado","heading":"6.5.5 Enlaces a otros documentos (hipervínculos)","text":"Se definen con paréntesis cuadrados ([]) seguidos de paréntesis redondos (()). En los paréntesis cuadrados se coloca (opcionalmente) el texto del enlace y en los redondos la dirección del documento.\nFigure 6.5: Sintaxis de Markdown: enlaces otros documentos.\n","code":""},{"path":"markdown-lenguaje-de-marcado.html","id":"imágenes","chapter":"6 Markdown: lenguaje de marcado","heading":"6.5.6 Imágenes","text":"Se definen con un signo de admiración de cierre (!), paréntesis cuadrados ([]) y paréntesis redondos (()). En los paréntesis cuadrados se coloca (opcionalmente) un texto alternativo de la imagen y en los redondos la dirección de la imagen, ya sea local o remota.\nFigure 6.6: Sintaxis de Markdown: imágenes.\n","code":""},{"path":"markdown-lenguaje-de-marcado.html","id":"listas-numeradas","chapter":"6 Markdown: lenguaje de marcado","heading":"6.5.7 Listas numeradas","text":"Se definen con números (1. 2. 3. ...) antes de cada elemento.\nFigure 6.7: Sintaxis de Markdown: listas numeradas.\n","code":""},{"path":"markdown-lenguaje-de-marcado.html","id":"listas-no-numeradas","chapter":"6 Markdown: lenguaje de marcado","heading":"6.5.8 Listas no numeradas","text":"Se definen con guiones (-) o asteriscos (*) antes de cada elemento.\nFigure 6.8: Sintaxis de Markdown: listas numeradas.\n","code":""},{"path":"markdown-lenguaje-de-marcado.html","id":"otros-elementos-de-sintaxis","chapter":"6 Markdown: lenguaje de marcado","heading":"6.5.9 Otros elementos de sintaxis","text":"Para conocer otros elementos de la sintaxis de Markdown, se recomienda revisar en detalle la Guía de referencia de Markdown.","code":""},{"path":"markdown-lenguaje-de-marcado.html","id":"ejercicios-1","chapter":"6 Markdown: lenguaje de marcado","heading":"6.6 Ejercicios","text":"Cree un documento Markdown llamado README.md, en RStudio, y escriba en este un breve perfil académico (curriculum académico).\nIncluya información como: nombre, fotografía, datos de contacto, áreas de interés, carrera, cursos aprobados, publicaciones, etc.\nPuede usar información ficticia (incluya datos confidenciales o sensibles).\nEspecifique la fuente de las imágenes (y de cualquier otra información para la que sea necesario) y utilice imágenes para las que tiene autorización. Considere utilizar sitios con imágenes con licencias abiertas (ej. Wikimedia Commons, Unsplash, FreeImages).\nAsegúrese de utilizar los siguientes elementos de sintaxis Markdown:\nVarios niveles de encabezados.\nNegritas e itálicas.\nListas.\nEnlaces sitios web.\nImágenes (al menos una local y una remota).\n\nIncluya información como: nombre, fotografía, datos de contacto, áreas de interés, carrera, cursos aprobados, publicaciones, etc.Puede usar información ficticia (incluya datos confidenciales o sensibles).Especifique la fuente de las imágenes (y de cualquier otra información para la que sea necesario) y utilice imágenes para las que tiene autorización. Considere utilizar sitios con imágenes con licencias abiertas (ej. Wikimedia Commons, Unsplash, FreeImages).Asegúrese de utilizar los siguientes elementos de sintaxis Markdown:\nVarios niveles de encabezados.\nNegritas e itálicas.\nListas.\nEnlaces sitios web.\nImágenes (al menos una local y una remota).\nVarios niveles de encabezados.Negritas e itálicas.Listas.Enlaces sitios web.Imágenes (al menos una local y una remota).Cree un repositorio en GitHub llamado perfil-academico y suba este el documento que creó en el paso 1.Cree un sitio web en GitHub Pages con el repositorio creado en el paso 2.","code":""},{"path":"markdown-lenguaje-de-marcado.html","id":"recursos-de-interés-4","chapter":"6 Markdown: lenguaje de marcado","heading":"6.7 Recursos de interés","text":"Carrera Arias, F. J. (2020). Install R Windows, Mac OS X, Ubuntu Tutorial. DataCamp Community. https://www.datacamp.com/community/tutorials/installing-R-windows-mac-ubuntuMarkdown Guide. (s. f.). Recuperado 10 de abril de 2022, de https://www.markdownguide.org/","code":""},{"path":"git-sistema-de-control-de-versiones.html","id":"git-sistema-de-control-de-versiones","chapter":"7 Git: sistema de control de versiones","heading":"7 Git: sistema de control de versiones","text":"","code":""},{"path":"git-sistema-de-control-de-versiones.html","id":"trabajo-previo-2","chapter":"7 Git: sistema de control de versiones","heading":"7.1 Trabajo previo","text":"","code":""},{"path":"git-sistema-de-control-de-versiones.html","id":"tutoriales-2","chapter":"7 Git: sistema de control de versiones","heading":"7.1.1 Tutoriales","text":"Abba, . V. (2021). Git GitHub Tutorial – Version Control Beginners. FreeCodeCamp.Org. https://www.freecodecamp.org/news/git--github--beginners/","code":""},{"path":"git-sistema-de-control-de-versiones.html","id":"otros-1","chapter":"7 Git: sistema de control de versiones","heading":"7.1.2 Otros","text":"Instale en su computadora el sistema de control de versiones Git.","code":""},{"path":"git-sistema-de-control-de-versiones.html","id":"resumen-6","chapter":"7 Git: sistema de control de versiones","heading":"7.2 Resumen","text":"Git es un sistema para administrar versiones de código fuente o, en general, de cualquier conjunto de archivos.","code":""},{"path":"git-sistema-de-control-de-versiones.html","id":"descripción-general-2","chapter":"7 Git: sistema de control de versiones","heading":"7.3 Descripción general","text":"Git es un sistema de control de versiones diseñado para rastrear cambios en el código fuente durante el proceso de desarrollo de software. Sin embargo, puede ser utilizado para llevar el control de los cambios en cualquier conjunto de archivos (ej. documentación, música).Un sistema de control de versiones proporciona, entre otras ventajas:La capacidad de recuperar versiones anteriores del conjunto de archivos.La capacidad de integrar modificaciones efectuadas por varias personas en el conjunto de archivos.La capacidad de mantener varias “ramas” (branches) de un producto (ej. “estable”, “evaluación”, “inestable”, como en el caso de Debian Linux, GRASS GIS y muchos otros proyectos de software libre).Facilidades para mantener redundancia y respaldos de los archivos (ej. Programa de respaldos de GitHub).Git fue diseñado por Linus Torvalds en 2005 durante del desarrollo del kernel del sistema operativo Linux. Se caracteriza por ser un sistema de control de versiones distribuido, lo que significa que el código fuente puede estar alojado en la estación de trabajo de cualquier miembro del equipo de desarrollo (.e. tiene que existir un repositorio central).El protocolo de Git es utilizado en varios sitios que proveen servicios de alojamiento de software, entre los que están SourceForge, Bitbucket, GitLab y GitHub.","code":""},{"path":"git-sistema-de-control-de-versiones.html","id":"como-funciona-git","chapter":"7 Git: sistema de control de versiones","heading":"7.4 ¿Como funciona Git?","text":"Desde el punto de vista de un usuario de Git (ej. un programador), Git se utiliza para sincronizar la versión local de un conjunto de archivos, llamado proyecto o repositorio, con la versión que está alojada en un sistema remoto (ej. GitHub). Cada repositorio se almacena en un directorio (carpeta) del sistema operativo. La sincronización se realiza principalmente través de dos operaciones:push: para “subir” al repositorio remoto los cambios realizados en el repositorio local. Esta operación se realiza mediante el comando git push. Es probable que el sistema remoto le solicite al usuario algún tipo de autenticación (ej. nombre de usuario y clave).pull: para “bajar” al repositorio local los cambios realizados en el repositorio remoto. Esta operación se realiza mediante el comando git pull.Las operaciones push y pull se ilustran en la figura 7.1.\nFigure 7.1: Operaciones push y pull. Imagen de Melinda Higgins.\nAntes de un push, el usuario debe seleccionar los archivos que desea subir mediante el comando git add, el cual pasa los archivos un “área de espera” (staging area). Luego debe usarse el comando git commit para “guardar” los cambios en el área de espera.La relación entre estas operaciones de Git, se ilustra en la figura 7.2.\nFigure 7.2: Operaciones de Git. Imagen de Steven Klavins.\nEn la figura 7.3 se muestra el funcionamiento de Git mediante una comparación con el procesamiento de una compra en línea.\nFigure 7.3: Operaciones de Git y compras en línea. Imagen de Melinda Higgins.\nOtras operaciones de Git de uso frecuente son:git config: para especificar opciones globales de la sesión de Git (ej. nombre del usuario, dirección de corre electrónico).git clone: para clonar (.e. copiar) un repositorio remoto en la computadora local.git status: para revisar el estado de los archivos y, por ejemplo, saber cuales deben pasarse al área de espera.","code":""},{"path":"git-sistema-de-control-de-versiones.html","id":"ejemplos-de-uso-1","chapter":"7 Git: sistema de control de versiones","heading":"7.5 Ejemplos de uso","text":"","code":""},{"path":"git-sistema-de-control-de-versiones.html","id":"clonación-de-un-repositorio-remoto-y-sincronización-de-los-cambios-efectuados-localmente","chapter":"7 Git: sistema de control de versiones","heading":"7.5.1 Clonación de un repositorio remoto y sincronización de los cambios efectuados localmente","text":"Para seguir este ejemplo:Bifurque (fork) su cuenta en GitHub el repositorio localizado en la dirección https://github.com/gf0604-procesamientodatosgeograficos/2022--tutorial-git-repo-ejemplo.Con la opción File - New Project - Version Control - Git de RStudio, clone su computadora el repositorio que acaba de bifurcar.Con el editor de RStudio, abra el archivo README.md, agregue una línea y guarde el archivo.Luego, ejecute los siguientes comandos desde la la ventana Terminal de RStudio. Nota: las líneas que empiezan con # son comentarios.Revise los cambios aplicados en el repositorio remoto en GitHub. Si se realizan nuevos cambios en el repositorio local, deben repetirse los pasos del 1 al 4. Los comentarios en el commando commit deben reflejar los cambios realizados.","code":"# 0. Especificación del nombre y de la dirección de correo del usuario.\n# Debe modificar la dirección de correo y el nombre del usuario con sus propios datos.\n$ git config --global user.email usuario@correo.com\n$ git config --global user.name usuariogithub\n# Para revisar:\n$ git config --global --list\n\n# 1. Revisión de los archivos con modificaciones.\n$ git status\n\n# 2. Adición de los archivos modificados al \"área de espera\".\n# El punto (.) indica que se agregarán todos los archivos modificados.\n$ git add .\n\n# 3. Almacenamiento (commit) del conjunto de archivos modificados, junto con un mensaje explicativo.\n$ git commit -m \"Agregar línea 2\"\n\n# 4. \"Subida\" (push) de las modificaciones al repositorio remoto.\n$ git push"},{"path":"git-sistema-de-control-de-versiones.html","id":"recursos-de-interés-5","chapter":"7 Git: sistema de control de versiones","heading":"7.6 Recursos de interés","text":"GitHub Archive Program. (s. f.). GitHub Archive Program. Recuperado 10 de abril de 2022, de https://archiveprogram.github.com/Higgins, M. (s. f.). Reproducible Templates Analysis Dissemination. Coursera. Recuperado 11 de abril de 2022, de https://www.coursera.org/learn/reproducible-templates-analysisKlavins, S. (2020). Version Control part 1. Medium. https://stevenklavins94.medium.com/version-control-part-1-c5f1b43127f6","code":""},{"path":"r---conceptos-básicos.html","id":"r---conceptos-básicos","chapter":"8 R - Conceptos básicos","heading":"8 R - Conceptos básicos","text":"","code":""},{"path":"r---conceptos-básicos.html","id":"trabajo-previo-3","chapter":"8 R - Conceptos básicos","heading":"8.1 Trabajo previo","text":"","code":""},{"path":"r---conceptos-básicos.html","id":"lecturas-1","chapter":"8 R - Conceptos básicos","heading":"8.1.1 Lecturas","text":"Grolemund, G., & Wickham, H. (2014). Hands-Programming R: Write Functions Simulations. O’Reilly Media. https://rstudio-education.github.io/hopr/","code":""},{"path":"r---conceptos-básicos.html","id":"resumen-7","chapter":"8 R - Conceptos básicos","heading":"8.2 Resumen","text":"En esta lección, se estudiarán los conceptos básicos del lenguaje de programación R, incluyendo:Características generales de R.El ambiente de desarrollo RStudio.Funciones y paquetes.Tipos de datos.","code":""},{"path":"r---conceptos-básicos.html","id":"características-generales","chapter":"8 R - Conceptos básicos","heading":"8.3 Características generales","text":"R es un lenguaje de programación enfocado en análisis estadístico. Es ampliamente utilizado en diversas áreas de investigación, entre las que pueden mencionarse aprendizaje automático (machine learning), ciencia de datos (data science) y big data, con aplicaciones en campos como biomedicina, bioinformática y finanzas, entre muchos otros. Fue creado por Ross Ihaka y Robert Gentleman en la Universidad de Auckland, Nueva Zelanda, en 1993.Algunas de las principales características de este lenguaje son:Es interpretado: las instrucciones se traducen una por una lenguaje máquina, diferencia de los lenguajes compilados, que traducen de manera conjunta las instrucciones de una unidad completa (ej. un programa o una biblioteca). Los lenguajes interpretados tienden ser más lentos que los compilados, pero también son más flexibles.Es multiplataforma: puede ejecutarse en los sistemas operativos más populares (ej. Microsoft Windows, macOS, Linux).Tiene un sistema de tipos de datos dinámico: las variables pueden tomar diferentes tipos de datos (ej. textuales, numéricos) durante la ejecución del programa, diferencia del caso de un sistema de tipos de datos estático, en el que las variables solo pueden tener un tipo de datos.Soporta varios paradigmas de programación: los paradigmas son estilos o enfoques teóricos de programación. R soporta los paradigmas de programación funcional, programación orientada objetos, programación imperativa y programación procedimental.R es un proyecto de software libre que se comparte mediante una licencia GNU General Public Licence (GNU GPL). Esta característica permite que la funcionalidad original de R pueda ser ampliada mediante bibliotecas o paquetes desarrollados por la comunidad de programadores.Para programar en R, puede utilizarse una interfaz de línea de comandos, editores de texto (ej. Visual Studio Code, Vim) y también ambientes de desarrollo integrados (IDE, integrated development environment) como Jupyter o RStudio.","code":""},{"path":"r---conceptos-básicos.html","id":"el-ambiente-de-desarrollo-rstudio","chapter":"8 R - Conceptos básicos","heading":"8.4 El ambiente de desarrollo RStudio","text":"RStudio es el IDE más popular para el lenguaje R. Está disponible en una versión de escritorio (RStudio Desktop) y en una versión para servidor (RStudio Server). Esta última permite la conexión de varios usuarios través de un navegador web. RStudio se ofrece también como un servicio en la nube, través de RStudio Cloud.La figura 8.1 muestra la interfaz de RStudio.\nFigure 8.1: Interfaz del ambiente integrado de desarrollo RStudio.\nAdemás de edición de código fuente en R (y otros lenguajes), RStudio contiene capacidades para depurar código y visualizar datos en formatos tabulares, gráficos y de mapas.","code":""},{"path":"r---conceptos-básicos.html","id":"conjuntos-de-datos-para-pruebas","chapter":"8 R - Conceptos básicos","heading":"8.5 Conjuntos de datos para pruebas","text":"Para efectos de pruebas y ejemplos, la distribución base de R incorpora varios conjuntos de datos que pueden listarse con la función data(). Para obtener información acerca de un conjunto de datos en particular, puede utilizarse el operador ?.","code":"\n# Información sobre todos los conjuntos de datos incorporados en la distribución base de R\ndata()\n\n# Información sobre el cojunto de datos \"cars\"\n?cars\n\n# Información sobre el cojunto de datos \"Iris\"\n?iris"},{"path":"r---conceptos-básicos.html","id":"funciones","chapter":"8 R - Conceptos básicos","heading":"8.6 Funciones","text":"R, al igual que otros lenguajes de programación, estructura su funcionalidad en unidades de código fuente llamadas funciones. Cada función realiza una tarea específica como, por ejemplo, un cálculo matemático y, por lo general, retorna un valor como salida. Todas las funciones tienen un nombre y, opcionalmente, un conjunto de argumentos que especifican los datos de entrada que procesa la función. Los argumentos se escriben entre paréntesis redondos (()) y estos siempre deben incluirse, aún en el caso de que la función tenga ningún argumento. Si la función tiene varios argumentos, deben separarse mediante comas (,).","code":""},{"path":"r---conceptos-básicos.html","id":"ejemplos","chapter":"8 R - Conceptos básicos","heading":"8.6.1 Ejemplos","text":"La función print() recibe como argumento un valor (ej. un texto o un número) para imprimirlo en la pantalla. En el siguiente fragmento de código en R, se utiliza print() para imprimir la hilera “Hola mundo”. Nótese el uso del símbolo # para comentarios (.e. texto que es código ejecutable).La función mean() retorna la media aritmética del argumento de entrada. En el siguiente ejemplo, se calcula la media de los números de un vector creado su vez con la función c().La función getwd() (get working directory) retorna la ruta del directorio de trabajo de la sesión actual de R. Este es el directorio en el cual R espera encontrar, por ejemplo, archivos de datos.La función setwd() (set working directory) establece la ruta del directorio de trabajo de la sesión actual de R. Como argumento, recibe una hilera de texto con la ruta.Note las barras utilizadas para separar los subdirectorios: / (\\)","code":"\n# Impresión de una hilera de caracteres\nprint(\"Hola mundo\")\n#> [1] \"Hola mundo\"\n# Media aritmética\nmean(c(2, 4, 5, 9))\n#> [1] 5\n# Impresión del directorio de trabajo\ngetwd()\n#> [1] \"/home/mfvargas/gf0604-procesamientodatosgeograficos/2022-i/github/2022-i\"\n# Definición del directorio de trabajo (la ruta debe existir)\nsetwd(\"C:/Users/mfvargas\")\n\n# Directorio con espacios, tildes y eñes\nsetwd(\"C:/Users/mfvargas/mi directorio con espacios y tildes áéíóúñ\")"},{"path":"r---conceptos-básicos.html","id":"ejercicios-2","chapter":"8 R - Conceptos básicos","heading":"8.6.2 Ejercicios","text":"Obtenga la ruta de su directorio de trabajo con la función getwd().Si lo desea, cambie la ruta de su directorio de trabajo con la función setwd(). Verifique el cambio con getwd().","code":""},{"path":"r---conceptos-básicos.html","id":"argumentos","chapter":"8 R - Conceptos básicos","heading":"8.6.3 Argumentos","text":"Los argumentos de las funciones tienen nombres que pueden especificarse, en caso de ser necesario. En algunos casos, el orden y el tipo de datos de los argumentos permiten que el interpretador de R conozca cuál es cada uno.En el siguiente ejemplo, se utilizan los argumentos x, xlab y ylab de la función plot() para especificar la fuente de datos y las etiquetas de los ejes x e y de un gráfico de dispersión.","code":"\n# Gráfico de dispersón del conjunto de datos \"cars\" con etiquetas en los ejes x e y\nplot(\n  x=cars, \n  xlab=\"Velocidad (mph)\", \n  ylab=\"Distancia requerida para frenar (pies)\"\n)"},{"path":"r---conceptos-básicos.html","id":"ejercicios-3","chapter":"8 R - Conceptos básicos","heading":"8.6.3.1 Ejercicios","text":"Estudie la documentación de la función plot() y agregue al gráfico anterior:\nUn título.\nUn subtítulo.\nUn título.Un subtítulo.","code":""},{"path":"r---conceptos-básicos.html","id":"ayuda","chapter":"8 R - Conceptos básicos","heading":"8.6.4 Ayuda","text":"Para obtener ayuda de una función desde la línea de comandos de R, puede utilizarse un signo de pregunta (?) seguido del nombre de la función o bien la función help(). Por ejemplo:Adicionalmente, puede utilizarse la función apropos() para buscar funciones por palabras clave.La función example() presenta ejemplos sobre el uso de una función.Por otra parte, el sitio R Documentation reúne documentación de funciones de una gran cantidad de paquetes de R. También puede obtenerse ayuda sobre una función en los buscadores de Internet (ej. Google), además de ejemplos, tutoriales y otros materiales de apoyo.","code":"\n# Ayuda de la función setwd()\n?setwd\nhelp(setwd)\n# Búsqueda, por palabras clave, de funciones relacionadas con \"mean\" (media aritmética). Note las comillas (\"\").\napropos(\"mean\")\n#>  [1] \".colMeans\"     \".rowMeans\"     \"colMeans\"     \n#>  [4] \"kmeans\"        \"mean\"          \"mean.Date\"    \n#>  [7] \"mean.default\"  \"mean.difftime\" \"mean.POSIXct\" \n#> [10] \"mean.POSIXlt\"  \"rowMeans\"      \"weighted.mean\"\n# Ejemplos de uso de la función mean()\nexample(\"mean\")\n#> \n#> mean> x <- c(0:10, 50)\n#> \n#> mean> xm <- mean(x)\n#> \n#> mean> c(xm, mean(x, trim = 0.10))\n#> [1] 8.75 5.50"},{"path":"r---conceptos-básicos.html","id":"paquetes","chapter":"8 R - Conceptos básicos","heading":"8.7 Paquetes","text":"Las funciones de R se distribuyen mediante paquetes. Cada paquete contiene un conjunto de funciones y estructuras de datos relacionadas entre sí. Para utilizar un paquete, primero debe cargarse (en la memoria del computador) con la función library().Algunos paquetes están contenidos en la distribución base de R y otros deben instalarse de manera separada con la función install.packages().En el siguiente ejemplo, se instala el paquete PASWR2, el cual contiene el conjunto de datos TITANIC3.El paquete PASWR2 se carga con library().El conjunto de datos TITANIC3 puede visualizarse con la función View().Para visualizar gráficamente el conjunto de datos, el siguiente gráfico de barras muestra la distribución de pasajeros por clase.La distribución por cada clase puede dividirse en fallecidos y sobrevivientes.El siguiente gráfico muestra en un gráfico de barras apiladas la distribución de pasajeros sobrevivientes y fallecidos en cada clase.La misma información se muestra seguidamente en un gráfico de barras agrupadas.","code":"\n# Carga del paquete stats\nlibrary(stats)\n# Instalación del paquete PASWR2 (note las comillas)\ninstall.packages(\"PASWR2\")\n# Carga de PASWR2\nlibrary(PASWR2)\n#> Loading required package: lattice\n#> Loading required package: ggplot2\n# Visualización del conjunto de datos TITANIC3\nView(TITANIC3)\n# Cantidades de pasajeros por clase\ntable(TITANIC3$pclass)\n#> \n#> 1st 2nd 3rd \n#> 323 277 709\n\n# Gráfico de barras por clase de pasajero\nbarplot(\n  height=table(TITANIC3$pclass),\n  main=\"Distribución de pasajeros del Titanic por clase\",\n  xlab = \"Clase\",\n  ylab = \"Cantidad de pasajeros\"  \n)\n# Cantidades de pasajeros fallecidos y sobrevivientes por clase\n# (0 corresponde a fallecidos y 1 a sobrevivientes)\ntable(TITANIC3$survived, TITANIC3$pclass)\n#>    \n#>     1st 2nd 3rd\n#>   0 123 158 528\n#>   1 200 119 181\n# Gráfico de barras apiladas\nbarplot(\n  height = table(TITANIC3$survived, TITANIC3$pclass),\n  main = \"Distribución de pasajeros fallecidos y sobrevivientes por clase\",\n  xlab = \"Clase\",\n  ylab = \"Cantidad de pasajeros\",\n  col = topo.colors(2)\n)\n\n# Leyenda\nlegend(\n  x = \"topleft\",\n  inset = 0.03,\n  legend = c(\"Fallecidos\", \"Sobrevivientes\"),\n  fill = topo.colors(2),\n  horiz = TRUE\n)\n# Gráfico de barras agrupadas\nbarplot(\n  height = table(TITANIC3$survived, TITANIC3$pclass),\n  main = \"Distribución de pasajeros fallecidos y sobrevivientes por clase\",\n  xlab = \"Clase\",\n  ylab = \"Cantidad de pasajeros\",  \n  col = topo.colors(2),\n  beside = TRUE\n)\n\n# Leyenda\nlegend(\n  x = \"topleft\",\n  inset = 0.03,\n  legend = c(\"Fallecidos\", \"Sobrevivientes\"),\n  fill = topo.colors(2),\n  horiz = TRUE\n)"},{"path":"r---conceptos-básicos.html","id":"ejercicios-4","chapter":"8 R - Conceptos básicos","heading":"8.7.1 Ejercicios","text":"Muestre la distribución de pasajeros fallecidos y sobrevivientes por sexo en un gráfico de barras apiladas.Muestre la distribución de pasajeros fallecidos y sobrevivientes por sexo en un gráfico de barras agrupadas.","code":""},{"path":"r---conceptos-básicos.html","id":"tipos-de-datos","chapter":"8 R - Conceptos básicos","heading":"8.8 Tipos de datos","text":"R puede trabajar con varios tipos de datos básicos, entre los que están números, caracteres (.e. textos) y lógicos. También puede trabajar con tipos compuestos, como factores y data frames.R proporciona acceso los datos través de objetos. Un objeto es una entidad que tiene asociadas propiedades (.e. datos) y métodos (.e. funciones) para manipular esas propiedades. Un objeto puede ser, por ejemplo, un número, una hilera de texto, un vector o una matriz.Hay muchas formas de crear objetos en R. Una de las más sencillas es con los operadores de asignación. Estos son = y <- (o ->). Por ejemplo, las siguientes sentencias crean un número, un texto y un vector.Tanto x, como nombre como dias son variables. Una variable es una etiqueta que se le asigna un objeto. Una variable debe comenzar con una letra.El tipo de una variable puede consultarse con la función typeof(). Por ejemplo:continuación, se describen con más detalle algunos de los tipos de datos utilizados en el lenguaje R.","code":"\n# Número\nx <- 10\nx\n#> [1] 10\n\n# Otro número\n20 -> y\ny\n#> [1] 20\n\n# Hilera de caracteres\nnombre <- 'Manuel'\nnombre\n#> [1] \"Manuel\"\n\n# Vector de hileras de caracteres\ndias <- c('Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado')\ndias\n#> [1] \"Domingo\"   \"Lunes\"     \"Martes\"    \"Miércoles\"\n#> [5] \"Jueves\"    \"Viernes\"   \"Sábado\"\ntypeof(x)\n#> [1] \"double\"\ntypeof(y)\n#> [1] \"double\"\ntypeof(nombre)\n#> [1] \"character\"\ntypeof(dias)\n#> [1] \"character\""},{"path":"r---conceptos-básicos.html","id":"tipos-básicos","chapter":"8 R - Conceptos básicos","heading":"8.8.1 Tipos básicos","text":"R define seis tipos de datos básicos. En esta sección, se describen los más utilizados durante este curso.","code":""},{"path":"r---conceptos-básicos.html","id":"números","chapter":"8 R - Conceptos básicos","heading":"8.8.1.1 Números","text":"Pueden ser enteros (integer) o decimales (double). Se utilizan en diversos tipos de operaciones, incluyendo las aritméticas (ej. suma, resta, multiplicación, división).Para declarar números enteros puede usarse el sufijo L o la función .integer().Nótese que al declararse una variable numérica, ya sea que tenga o punto decimal, R la considera por defecto de tipo double. Para que se considere de tipo integer, debe utilizarse el sufijo L o la función .integer().","code":"\n# Declaración de variables numéricas\nx <- 5\ny <- 0.5\n\n# Suma\nx + y\n#> [1] 5.5\n\n# Tipos de datos numéricos\ntypeof(x)\n#> [1] \"double\"\ntypeof(y)\n#> [1] \"double\"\ntypeof(x + y)\n#> [1] \"double\"\n# Números enteros\nx <- 10L\ny <- as.integer(15)\n\n# Multiplicación\nx * y\n#> [1] 150\n\n# Tipos de datos enteros\ntypeof(x)\n#> [1] \"integer\"\ntypeof(y)\n#> [1] \"integer\"\ntypeof(x * y)\n#> [1] \"integer\""},{"path":"r---conceptos-básicos.html","id":"caracteres","chapter":"8 R - Conceptos básicos","heading":"8.8.1.2 Caracteres","text":"Se utilizan para representar textos. Deben estar encerrados entre comillas simples ('') o dobles (\"\").","code":"\n# Hileras de caracteres\nnombre <- \"María\"\napellido <- \"Pérez\"\n\n# Concatenación mediante la función paste()\npaste(nombre, apellido)\n#> [1] \"María Pérez\""},{"path":"r---conceptos-básicos.html","id":"lógicos","chapter":"8 R - Conceptos básicos","heading":"8.8.1.3 Lógicos","text":"Los objetos lógicos (también llamados booleanos) tienen dos posibles valores: verdadero (TRUE) o falso (FALSE).Las expresiones lógicas pueden combinarse con operadores como:& (Y, en inglés )| (O, en inglés )! (, en inglés )","code":"\n# Variable lógica\na <- 1 < 2\na\n#> [1] TRUE\n\n# Variable lógica\nb <- 1 > 2\nb\n#> [1] FALSE\n# Operador lógico AND\n(1 < 2) & (3 < 4)\n#> [1] TRUE\n\n# Operador lógico OR\n(2 + 2 == 5) | (20 <= 10)\n#> [1] FALSE\n\n# Operador lógico NOT\n!(2 + 2 == 5)\n#> [1] TRUE"},{"path":"r---conceptos-básicos.html","id":"vectores","chapter":"8 R - Conceptos básicos","heading":"8.8.1.4 Vectores","text":"Un vector es una estructura unidimensional que combina objetos del mismo tipo.","code":""},{"path":"r---conceptos-básicos.html","id":"definición","chapter":"8 R - Conceptos básicos","heading":"8.8.1.4.1 Definición","text":"Los vectores pueden definirse de varias formas como, por ejemplo, con la función c() (del inglés combine):Los vectores también pueden crearse con el operador :, el cual especifica una secuencia:La función seq() también crea un vector con base en una secuencia y permite especificar argumentos como un valor de incremento y la longitud de la secuencia.","code":"\n# Definición de un vector de números\nvector_numeros <- c(1, 7, 32, 45, 57)\nvector_numeros\n#> [1]  1  7 32 45 57\n\n# Definición de un vector de hileras de caracteres\nvector_nombres <- c(\"Álvaro\", \"Ana\", \"Berta\", \"Bernardo\")\nvector_nombres\n#> [1] \"Álvaro\"   \"Ana\"      \"Berta\"    \"Bernardo\"\n# Definición de un vector de números con la secuencia de 1 a 10\nvector_secuencia <- 1:10\nvector_secuencia\n#>  [1]  1  2  3  4  5  6  7  8  9 10\n\n# Definición de un vector de números con la secuencia de -5 a 5\nvector_secuencia <- -5:5\nvector_secuencia\n#>  [1] -5 -4 -3 -2 -1  0  1  2  3  4  5\n\n# Definición de un vector de números con la secuencia de -0.5 a 3.7\nvector_secuencia <- -0.5:3.7\nvector_secuencia\n#> [1] -0.5  0.5  1.5  2.5  3.5\n# Definición de un vector de números con la secuencia de 1 a 10\nvector_secuencia <- seq(1, 10)\nvector_secuencia\n#>  [1]  1  2  3  4  5  6  7  8  9 10\n\n# Definición de un vector de números con la secuencia de 0.5 a 15.3, con incremento de 2\nvector_secuencia <- seq(from=0.5, to=15.3, by=2)\nvector_secuencia\n#> [1]  0.5  2.5  4.5  6.5  8.5 10.5 12.5 14.5\n\n# Definición de un vector de números con la secuencia de 1.5 a 9.4, con longitud de 4\nvector_secuencia <- seq(from=1.5, to=9.4, length.out=4)\nvector_secuencia\n#> [1] 1.500000 4.133333 6.766667 9.400000"},{"path":"r---conceptos-básicos.html","id":"indexación","chapter":"8 R - Conceptos básicos","heading":"8.8.1.4.2 Indexación","text":"Los elementos de un vector se acceden través de sus índices (.e. posiciones). La primera posición corresponde al índice 1, la segunda al índice 2 y así sucesivamente. Los índices se especifican entre paréntesis cuadrados ([]), ya sea para una posición específica o para un rango de posiciones. También es posible especificar los índices que se desea excluir.El operador : puede utilizarse para especificar un rango de índices:Con la función c(), es posible especificar un conjunto de índices particulares:Los números negativos pueden usarse para excluir índices:Los valores lógicos TRUE y FALSE también pueden usarse para incluir y excluir índices de un vector:","code":"\n# Vector de nombres de países\npaises <- c(\"Argentina\", \"Francia\", \"China\", \"Australia\", \"México\")\npaises\n#> [1] \"Argentina\" \"Francia\"   \"China\"     \"Australia\"\n#> [5] \"México\"\n\n# Elemento en el índice 3\npaises[3]\n#> [1] \"China\"\n# Elementos entre los índices 2 y 4 (2, 3 y 4)\npaises[2:4]\n#> [1] \"Francia\"   \"China\"     \"Australia\"\n# Elementos entre los índices 1, 4 y 5\npaises[c(1, 4, 5)]\n#> [1] \"Argentina\" \"Australia\" \"México\"\n# Exclusión de los índices 3 y 4\npaises[c(-3, -4)]\n#> [1] \"Argentina\" \"Francia\"   \"México\"\n# Se incluyen los índices 1, 2 y 4; y se excluyen los índices 3 y 5\npaises[c(TRUE, TRUE, FALSE, TRUE, FALSE)]\n#> [1] \"Argentina\" \"Francia\"   \"Australia\""},{"path":"r---conceptos-básicos.html","id":"operaciones","chapter":"8 R - Conceptos básicos","heading":"8.8.1.4.3 Operaciones","text":"En los vectores pueden aplicarse operaciones aritméticas:Y también pueden realizarse operaciones relacionales:","code":"\na <- c(1, 3, 5, 7)\nb <- c(2, 4, 6, 8)\n\n# Suma de vectores\na + b\n#> [1]  3  7 11 15\n\n# Multiplicación de vectores\na * b\n#> [1]  2 12 30 56\n# Comparación con el operador <\na < b\n#> [1] TRUE TRUE TRUE TRUE"},{"path":"r---conceptos-básicos.html","id":"matrices","chapter":"8 R - Conceptos básicos","heading":"8.8.1.5 Matrices","text":"Una matriz es una estructura bidimensional de filas y columnas.","code":""},{"path":"r---conceptos-básicos.html","id":"definición-1","chapter":"8 R - Conceptos básicos","heading":"8.8.1.5.1 Definición","text":"Las matrices se definen mediante la función matrix().La función list() se utiliza, en este caso, para combinar vectores. En general, se usa para combinar datos de cualquier tipo.","code":"\n# Definición de una matriz de 3 x 3 con elementos de la secuencia 1:9 distribuidos en las columnas\nm <- matrix(1:9, nrow=3, ncol=3)\nm\n#>      [,1] [,2] [,3]\n#> [1,]    1    4    7\n#> [2,]    2    5    8\n#> [3,]    3    6    9\n\n# Definición de una matriz de 3 x 3 con elementos de la secuencia 1:9 distribuidos en las filas\nm <- matrix(1:9, nrow=3, ncol=3, byrow=TRUE)\nm\n#>      [,1] [,2] [,3]\n#> [1,]    1    2    3\n#> [2,]    4    5    6\n#> [3,]    7    8    9\n\n# Definición de una matriz de 3 x 2 con nombres para las filas y las columnas\ndatos <- c(18, 500, 25, 1000, 30, 2000)\nfilas <- c(\"Ana\", \"Mario\", \"Laura\")\ncolumnas <- c(\"Edad\", \"Salario\")\n\nm <- matrix(datos, nrow=3, ncol=2, byrow=TRUE, dimnames=list(filas, columnas))\nm\n#>       Edad Salario\n#> Ana     18     500\n#> Mario   25    1000\n#> Laura   30    2000"},{"path":"r---conceptos-básicos.html","id":"indexación-1","chapter":"8 R - Conceptos básicos","heading":"8.8.1.5.2 Indexación","text":"La indexación de matrices es similar la de vectores, pero deben especificarse índices tanto para filas como para columnas.","code":"\n# Elemento en la posición [2,2] (segunda fila, segunda columna)\nm[2, 2]\n#> [1] 1000\n\n# Elementos de la primera fila\nm[1,]\n#>    Edad Salario \n#>      18     500\n\n# Elementos de la segunda columna\nm[, 2]\n#>   Ana Mario Laura \n#>   500  1000  2000\n\n# Elementos de las filas 1 y 2\nm[1:2, ]\n#>       Edad Salario\n#> Ana     18     500\n#> Mario   25    1000\n\n# Elementos de la fila \"Mario\"\nm[\"Mario\", ]\n#>    Edad Salario \n#>      25    1000\n\n# Elementos de la columna \"Salario\"\nm[, \"Salario\"]\n#>   Ana Mario Laura \n#>   500  1000  2000"},{"path":"r---conceptos-básicos.html","id":"operaciones-1","chapter":"8 R - Conceptos básicos","heading":"8.8.1.5.3 Operaciones","text":"De manera similar los vectores, en las matrices pueden realizarse operaciones aritméticas y relacionales.","code":"\na <- matrix(1:4, nrow=2, ncol=2)\na\n#>      [,1] [,2]\n#> [1,]    1    3\n#> [2,]    2    4\n\nb <- matrix(5:8, nrow=2, ncol=2)\nb\n#>      [,1] [,2]\n#> [1,]    5    7\n#> [2,]    6    8\n\n# Suma de matrices\na + b\n#>      [,1] [,2]\n#> [1,]    6   10\n#> [2,]    8   12\n\n# Multiplicación de matrices\na * b\n#>      [,1] [,2]\n#> [1,]    5   21\n#> [2,]   12   32\n\n# Comparación de matrices con el operador >\na > b\n#>       [,1]  [,2]\n#> [1,] FALSE FALSE\n#> [2,] FALSE FALSE"},{"path":"r---conceptos-básicos.html","id":"tipos-compuestos","chapter":"8 R - Conceptos básicos","heading":"8.8.2 Tipos compuestos","text":"","code":""},{"path":"r---conceptos-básicos.html","id":"factores","chapter":"8 R - Conceptos básicos","heading":"8.8.2.1 Factores","text":"Los factores se utilizan para representar datos categóricos. Un factor corresponde un conjunto de categorías correspondientes un concepto (ej. [“Sí”, “”], [“Casado”, “Soltero”], [“Alto”, “Medio”, “Bajo”]).Internamente, los factores se representan en R como números enteros con etiquetas asociadas. pesar de que los factores parecen (y pueden funcionar como) hileras de caracteres, en realidad son números y debe tenerse cuidado de manejarlos como caracteres.Los elementos de un factor se denominan niveles (levels) y, por defecto, se almacenan en orden alfabético.","code":""},{"path":"r---conceptos-básicos.html","id":"definición-2","chapter":"8 R - Conceptos básicos","heading":"8.8.2.1.1 Definición","text":"Un factor se crea con la función factor().","code":"\n# Factor de valores de sexo\nsexo <- factor(c(\"Masculino\", \"Femenino\", \"Femenino\", \"Masculino\"))"},{"path":"r---conceptos-básicos.html","id":"operaciones-2","chapter":"8 R - Conceptos básicos","heading":"8.8.2.1.2 Operaciones","text":"R proporciona una gran variedad de funciones para manejar factores. Seguidamente, se ejemplifican algunas de estas.","code":"\n# Etiquetas de los niveles\nlevels(sexo)\n#> [1] \"Femenino\"  \"Masculino\"\n\n# Cantidad de niveles\nnlevels(sexo)\n#> [1] 2\n\n# Conteo de elementos de cada uno de los niveles del factor\ntable(sexo)\n#> sexo\n#>  Femenino Masculino \n#>         2         2"},{"path":"r---conceptos-básicos.html","id":"data-frames","chapter":"8 R - Conceptos básicos","heading":"8.8.2.2 Data Frames","text":"Los data frames son estructuras bidimensionales compuestas por varios vectores, de manera similar una matriz. Por lo general, las filas de la matriz corresponden observaciones (o cases) y las columnas variables. La definición de un data frame puede incluir nombres para cada observación y para cada variable. Los data frames implementan un conjunto de funciones similares las de una hoja electrónica o la tabla de una base de datos relacional. Son fundamentales para el manejo de datos en R.","code":""},{"path":"r---conceptos-básicos.html","id":"definición-3","chapter":"8 R - Conceptos básicos","heading":"8.8.2.2.1 Definición","text":"La función data.frame() crea un data frame partir de vectores que serán las columnas del data frame.","code":"\n# Vector de nombres de países\npaises <- c(\"PAN\", \"CRI\", \"NIC\", \"SLV\", \"HND\", \"GTM\", \"BLZ\", \"DOM\")\n\n# Vector de cantidades de habitantes de cada país (en millones)\npoblaciones <- c(4.1, 5.0, 6.2, 6.4, 9.2, 16.9, 0.3, 10.6)\n\n# Creación de un data frame a partir de los dos vectores\npoblaciones_paises <- \n  data.frame(\n    pais = paises, \n    poblacion = poblaciones\n  )\n\n# Impresión del data frame\npoblaciones_paises\n#>   pais poblacion\n#> 1  PAN       4.1\n#> 2  CRI       5.0\n#> 3  NIC       6.2\n#> 4  SLV       6.4\n#> 5  HND       9.2\n#> 6  GTM      16.9\n#> 7  BLZ       0.3\n#> 8  DOM      10.6"},{"path":"r---conceptos-básicos.html","id":"indexación-2","chapter":"8 R - Conceptos básicos","heading":"8.8.2.2.2 Indexación","text":"Los datos de un data frame pueden accederse principalmente de dos formas. La primera es mediante la misma sintaxis [fila, columna] que se utiliza en las matrices.Además, mediante el operador $, es posible acceder las columnas (.e. variables) del data frame.","code":"\n# Fila 1\npoblaciones_paises[1, ]\n#>   pais poblacion\n#> 1  PAN       4.1\n\n# Filas 1, 5 y 7\npoblaciones_paises[c(1, 5, 7), ]\n#>   pais poblacion\n#> 1  PAN       4.1\n#> 5  HND       9.2\n#> 7  BLZ       0.3\n\n# Columna 2\npoblaciones_paises[, 2]\n#> [1]  4.1  5.0  6.2  6.4  9.2 16.9  0.3 10.6\n\n# Fila 1, columna 2\npoblaciones_paises[1, 2]\n#> [1] 4.1\n\n# Filas 1:4, columna 2\npoblaciones_paises[1:4, 2]\n#> [1] 4.1 5.0 6.2 6.4\n# Columna de nombres de países\npoblaciones_paises$pais\n#> [1] \"PAN\" \"CRI\" \"NIC\" \"SLV\" \"HND\" \"GTM\" \"BLZ\" \"DOM\"\n\n# Modificación de los valores de toda una columna\npoblaciones_paises$poblacion = poblaciones_paises$poblacion*2\npoblaciones_paises\n#>   pais poblacion\n#> 1  PAN       8.2\n#> 2  CRI      10.0\n#> 3  NIC      12.4\n#> 4  SLV      12.8\n#> 5  HND      18.4\n#> 6  GTM      33.8\n#> 7  BLZ       0.6\n#> 8  DOM      21.2"},{"path":"r---conceptos-básicos.html","id":"operaciones-3","chapter":"8 R - Conceptos básicos","heading":"8.8.2.2.3 Operaciones","text":"R proporciona una gran variedad de funciones para manejar data frames. Las siguientes son algunas de las más utilizadas.La función read.table() lee los datos contenidos en un archivo de texto y los retorna en un data frame. read.csv() es una función derivada, con valores por defecto orientados los archivos de valores separados por comas (CSV, Comma Separated Values). Como argumento principal, read.csv() recibe la ruta del archivo CSV, el cual puede encontrarse en un disco local, en la Web o en otra ubicación.","code":"\n# Lectura de archivo CSV ubicado en la Web\ncovid <- \n  read.csv(\"https://raw.githubusercontent.com/tpb728O-programaciongeoespacialr/2021ii/main/datos/cepredenac/covid/04_22_21_CSV_GENERAL_CENTROAMERICA.csv\")\n\ncovid\n#>   pais fallecidos recuperados activos positivos\n#> 1  PAN       6198      351949    3845    361992\n#> 2  CRI       3125      199779   32370    235274\n#> 3  GTM       7345      194075   16725    218145\n#> 4  HND       4981       77020  121358    203359\n#> 5  SLV       2089       64208    1864     68161\n#> 6  BLZ        318       12164     114     12596\n#> 7  NIC        181        5212      57      5450"},{"path":"r---conceptos-básicos.html","id":"ejercicios-5","chapter":"8 R - Conceptos básicos","heading":"8.8.2.2.4 Ejercicios","text":"Descargue el archivo del ejemplo anterior (https://raw.githubusercontent.com/tpb728O-programaciongeoespacialr/2021ii/main/datos/cepredenac/covid/04_22_21_CSV_GENERAL_CENTROAMERICA.csv) en su computadora y cárguelo en otro data frame mediante read.csv().La función str() despliega la estructura de un objeto R.La función summary() proporciona un resumen de los contenidos de un data frame:La función View() invoca un visor de datos que permite visualizar un objeto R en un formato de tabla en una hoja de cálculo. Ejecute en su computadora la siguiente línea de código para apreciar el funcionamiento de View().","code":"\n# Estructura del data frame\nstr(poblaciones_paises)\n#> 'data.frame':    8 obs. of  2 variables:\n#>  $ pais     : chr  \"PAN\" \"CRI\" \"NIC\" \"SLV\" ...\n#>  $ poblacion: num  8.2 10 12.4 12.8 18.4 33.8 0.6 21.2\n# Resumen de los contenidos del data frame\nsummary(poblaciones_paises)\n#>      pais             poblacion    \n#>  Length:8           Min.   : 0.60  \n#>  Class :character   1st Qu.: 9.55  \n#>  Mode  :character   Median :12.60  \n#>                     Mean   :14.68  \n#>                     3rd Qu.:19.10  \n#>                     Max.   :33.80\n# Vista de los casos de COVID-19\nView(covid, \"Casos de COVID-19 en Centramérica\")"},{"path":"r---conceptos-básicos.html","id":"otros-2","chapter":"8 R - Conceptos básicos","heading":"8.8.3 Otros","text":"","code":""},{"path":"r---conceptos-básicos.html","id":"fechas","chapter":"8 R - Conceptos básicos","heading":"8.8.3.1 Fechas","text":"Las fecha se manejan en R mediante un tipo especial que permite realizar operaciones como diferencias, agrupamientos y otras. Internamente, las fechas en R se almacenan como un número que representa la cantidad de días transcurridos desde el 1 de enero de 1970 (1970-01-01).","code":""},{"path":"r---conceptos-básicos.html","id":"operaciones-4","chapter":"8 R - Conceptos básicos","heading":"8.8.3.1.1 Operaciones","text":"La función Sys.Date() retorna la fecha actual.La función .Date() convierte datos entre los tipos fecha y carácter, de acuerdo con un formato.Hay una lista de formatos de fechas en Date Formats R - R-bloggers.","code":"\n# Fecha actual\nfecha_actual <- Sys.Date()\nfecha_actual\n#> [1] \"2022-04-24\"\n\n# Tipo de datos\ntypeof(fecha_actual)\n#> [1] \"double\"\n\n# Clase\nclass(fecha_actual)\n#> [1] \"Date\"\n# Conversión de fecha en formato año-mes-día\nfecha_caracter_01 <- \"2020-01-01\"\nfecha_01 <- as.Date(fecha_caracter_01, format=\"%Y-%m-%d\")\nfecha_01\n#> [1] \"2020-01-01\"\n\n# Conversión de fecha en formato día/mes/año\nfecha_caracter_02 <- \"31/01/2020\"\nfecha_02 <- as.Date(fecha_caracter_02, format=\"%d/%m/%Y\")\nfecha_02\n#> [1] \"2020-01-31\"\n\n# Diferencia entre fechas\nfecha_02 - fecha_01\n#> Time difference of 30 days"},{"path":"r---conceptos-básicos.html","id":"recursos-de-interés-6","chapter":"8 R - Conceptos básicos","heading":"8.9 Recursos de interés","text":"Find Open Datasets Machine Learning Projects | Kaggle. (s. f.). Recuperado 24 de abril de 2022, de https://www.kaggle.com/datasetsNewest «r» Questions. (s. f.). Stack Overflow. Recuperado 24 de abril de 2022, de https://stackoverflow.com/questions/tagged/rR Language Definition. (s. f.). Recuperado 24 de abril de 2022, de https://cran.r-project.org/doc/manuals/r-release/R-lang.html","code":""},{"path":"exámenes-cortos.html","id":"exámenes-cortos","chapter":"Exámenes cortos","heading":"Exámenes cortos","text":"","code":""},{"path":"exámenes-cortos.html","id":"examen-corto-1","chapter":"Exámenes cortos","heading":"Examen corto 1","text":"Fecha\n- Grupo 001: Miércoles 20 de abril de 2022\n- Grupo 002: Jueves 21 de abril de 2022Temas evaluarPensamiento computacionalPensamiento computacionalArquitectura de computadoras y lenguajes de programaciónArquitectura de computadoras y lenguajes de programaciónInteracción humano-computadorInteracción humano-computadorEjemplo de interfaz de línea de comandos - GDAL/OGR: biblioteca para lectura y escritura de datos geoespacialesEjemplo de interfaz de línea de comandos - GDAL/OGR: biblioteca para lectura y escritura de datos geoespacialesPebesma, E., Wagner, W., Verbesselt, J., Goor, E., Briese, C., & Neteler, M. (2016). OpenEO: GDAL Earth Observation Analytics. https://r-spatial.org/2016/11/29/openeo.htmlPebesma, E., Wagner, W., Verbesselt, J., Goor, E., Briese, C., & Neteler, M. (2016). OpenEO: GDAL Earth Observation Analytics. https://r-spatial.org/2016/11/29/openeo.html","code":""},{"path":"conjuntos-de-datos.html","id":"conjuntos-de-datos","chapter":"Conjuntos de datos","heading":"Conjuntos de datos","text":"La siguiente es la lista de conjuntos de datos utilizados en el curso, ordenados por el nombre de la institución o iniciativa que los comparte.","code":""},{"path":"conjuntos-de-datos.html","id":"instituto-geográfico-nacional-ign","chapter":"Conjuntos de datos","heading":"Instituto Geográfico Nacional (IGN)","text":"","code":""},{"path":"conjuntos-de-datos.html","id":"delimitación-territorial-administrativa","chapter":"Conjuntos de datos","heading":"Delimitación territorial administrativa","text":"ProvinciasCantonesDistritos","code":""},{"path":"conjuntos-de-datos.html","id":"centro-de-coordinación-para-la-prevención-de-los-desastres-en-centroamérica-y-república-dominicana-cepredenac","chapter":"Conjuntos de datos","heading":"Centro de Coordinación para la Prevención de los Desastres en Centroamérica y República Dominicana (Cepredenac)","text":"Covid","code":""}]
